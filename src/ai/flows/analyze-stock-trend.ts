// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview Analyzes stock market trends using candlestick charts and provides investment recommendations.
 *
 * - analyzeStockTrend - Analyzes the trend of a given stock.
 * - AnalyzeStockTrendInput - The input type for the analyzeStockTrend function.
 * - AnalyzeStockTrendOutput - The return type for the analyzeStockTrend function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeStockTrendInputSchema = z.object({
  tickerSymbol: z.string().describe('The ticker symbol of the stock to analyze.'),
  chartDataUri: z
    .string()
    .describe(
      "A candlestick chart of the stock, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AnalyzeStockTrendInput = z.infer<typeof AnalyzeStockTrendInputSchema>;

const AnalyzeStockTrendOutputSchema = z.object({
  analysis: z.string().describe('The AI analysis of the candlestick chart.'),
  recommendation: z.string().describe('Investment recommendations based on the analysis.'),
});
export type AnalyzeStockTrendOutput = z.infer<typeof AnalyzeStockTrendOutputSchema>;

export async function analyzeStockTrend(input: AnalyzeStockTrendInput): Promise<AnalyzeStockTrendOutput> {
  return analyzeStockTrendFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeStockTrendPrompt',
  input: {schema: AnalyzeStockTrendInputSchema},
  output: {schema: AnalyzeStockTrendOutputSchema},
  prompt: `You are an expert stock market analyst. Analyze the provided candlestick chart for the stock {{{tickerSymbol}}} and provide a detailed analysis of its trends and patterns. Based on the analysis, provide clear and actionable investment recommendations.

Chart:
{{media url=chartDataUri}}

Analysis:
{{analysis}}

Recommendation:
{{recommendation}}`,
});

const analyzeStockTrendFlow = ai.defineFlow(
  {
    name: 'analyzeStockTrendFlow',
    inputSchema: AnalyzeStockTrendInputSchema,
    outputSchema: AnalyzeStockTrendOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
